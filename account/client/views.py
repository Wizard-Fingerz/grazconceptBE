from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import Response

from .models import Client
from .serializers import ClientSerializer

from django.utils.crypto import get_random_string
from definition.models import TableDropDownDefinition

class ClientViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows clients to be viewed or edited.
    """
    queryset = Client.objects.all().order_by("-created_date")
    serializer_class = ClientSerializer
    permission_classes = [IsAuthenticated]

    def create(self, request, *args, **kwargs):
        data = request.data.copy()

        # Autogenerate password
        autogenerated_password = get_random_string(length=12)
        # data['password'] = autogenerated_password
        data['password'] = '12345CLIENT'

        # Set user_type to Customer by default
        try:
            customer_type = TableDropDownDefinition.objects.get(
                table_name='user_type', term__iexact='Customer'
            )
            data['user_type'] = customer_type.id
        except TableDropDownDefinition.DoesNotExist:
            return Response(
                {"error": "Default user_type 'Customer' not found."},
                status=400
            )

        # Set created_by to the requesting user
        data['created_by'] = request.user.id

        serializer = self.get_serializer(data=data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=201, headers=headers)

    def update_profile(self, request, *args, **kwargs):
        """
        Custom action for clients to update their own profile.
        Handles country_of_residence and nationality fields to accept country codes.
        """
        user = request.user
        try:
            client = Client.objects.get(id=user.id)
        except Client.DoesNotExist:
            return Response({"error": "Client not found."}, status=404)

        data = request.data.copy()

        # Handle country_of_residence and nationality: accept country name or code, convert to code if needed
        from django_countries import countries

        def get_country_code(value):
            if not value:
                return value
            # If already a valid country code, return as is
            if value in dict(countries):
                return value
            # Try to find code by name (case-insensitive)
            for code, name in countries:
                if name.lower() == value.lower():
                    return code
            return value  # fallback, let serializer handle invalid

        if "country_of_residence" in data:
            data["country_of_residence"] = get_country_code(data["country_of_residence"])
        if "nationality" in data:
            data["nationality"] = get_country_code(data["nationality"])

        serializer = self.get_serializer(client, data=data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save(modified_by=user)
        return Response(serializer.data, status=200)

    # Optionally, you can expose this as a route using @action if using DRF routers:
    from rest_framework.decorators import action

    @action(detail=False, methods=['put', 'patch'], url_path='update-profile', permission_classes=[IsAuthenticated])
    def update_profile_action(self, request, *args, **kwargs):
        """
        Endpoint for the authenticated client to update their own profile.
        """
        return self.update_profile(request, *args, **kwargs)


